=begin
#Meltwater Streaming API v2

#The Meltwater Streaming API provides the needed resources for Meltwater clients to create & delete REST Hooks and stream Meltwater search results to your specified destination.

OpenAPI spec version: 2.0.0
Contact: support@api.meltwater.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class HooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a hook for one of your predefined searches.
    # Creates a hook for one of your predefined searches.  Delivers search results for the query referenced by the `search_id` to the `target_url` via HTTP POST. Note that a `hook_id` will be returned on successful creation, this id is needed to delete the hook.   We are also returning the header: `X-Hook-Secret`, a shared secret used to sign the document body pushed to your `target_url`.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param v2_hooks 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_hook_secret Shared secret for content signing/verification.    The shared secret header is optional and can be provided by the user or will  be set by the API. Must be between 16 and 64 characters.  Obtain the shared secret from the response header &#x60;X-Hook-Secret&#x60;.    #### Example:        e2d264b524240b9572ebc2fc7eebd980
    # @return [Hook]
    def create_hook(user_key, authorization, v2_hooks, opts = {})
      data, _status_code, _headers = create_hook_with_http_info(user_key, authorization, v2_hooks, opts)
      return data
    end

    # Creates a hook for one of your predefined searches.
    # Creates a hook for one of your predefined searches.  Delivers search results for the query referenced by the &#x60;search_id&#x60; to the &#x60;target_url&#x60; via HTTP POST. Note that a &#x60;hook_id&#x60; will be returned on successful creation, this id is needed to delete the hook.   We are also returning the header: &#x60;X-Hook-Secret&#x60;, a shared secret used to sign the document body pushed to your &#x60;target_url&#x60;.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param v2_hooks 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_hook_secret Shared secret for content signing/verification.    The shared secret header is optional and can be provided by the user or will  be set by the API. Must be between 16 and 64 characters.  Obtain the shared secret from the response header &#x60;X-Hook-Secret&#x60;.    #### Example:        e2d264b524240b9572ebc2fc7eebd980
    # @return [Array<(Hook, Fixnum, Hash)>] Hook data, response status code and response headers
    def create_hook_with_http_info(user_key, authorization, v2_hooks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HooksApi.create_hook ..."
      end
      # verify the required parameter 'user_key' is set
      fail ArgumentError, "Missing the required parameter 'user_key' when calling HooksApi.create_hook" if user_key.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling HooksApi.create_hook" if authorization.nil?
      # verify the required parameter 'v2_hooks' is set
      fail ArgumentError, "Missing the required parameter 'v2_hooks' when calling HooksApi.create_hook" if v2_hooks.nil?
      # resource path
      local_var_path = "/v2/hooks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'user-key'] = user_key
      header_params[:'Authorization'] = authorization
      header_params[:'X-Hook-Secret'] = opts[:'x_hook_secret'] if !opts[:'x_hook_secret'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(v2_hooks)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HooksApi#create_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing hook.
    # Delete an existing hook.  Removes the hook and stops sending any search results to the target_url.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param hook_id Hook ID received from creating a hook
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_hook(user_key, authorization, hook_id, opts = {})
      delete_hook_with_http_info(user_key, authorization, hook_id, opts)
      return nil
    end

    # Delete an existing hook.
    # Delete an existing hook.  Removes the hook and stops sending any search results to the target_url.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param hook_id Hook ID received from creating a hook
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_hook_with_http_info(user_key, authorization, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HooksApi.delete_hook ..."
      end
      # verify the required parameter 'user_key' is set
      fail ArgumentError, "Missing the required parameter 'user_key' when calling HooksApi.delete_hook" if user_key.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling HooksApi.delete_hook" if authorization.nil?
      # verify the required parameter 'hook_id' is set
      fail ArgumentError, "Missing the required parameter 'hook_id' when calling HooksApi.delete_hook" if hook_id.nil?
      # resource path
      local_var_path = "/v2/hooks/{hook_id}".sub('{format}','json').sub('{' + 'hook_id' + '}', hook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'user-key'] = user_key
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HooksApi#delete_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all hooks.
    # List all hooks.     Delivers all previously generated hooks.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param [Hash] opts the optional parameters
    # @return [HooksCollection]
    def get_all_hooks(user_key, authorization, opts = {})
      data, _status_code, _headers = get_all_hooks_with_http_info(user_key, authorization, opts)
      return data
    end

    # List all hooks.
    # List all hooks.     Delivers all previously generated hooks.    Requires an OAuth access token.
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;Oauth Access Token&#x60;    OAuth access token (RFC 6749). Must contain the access token type &#x60;Bearer&#x60;  followed by an OAuth access token.    #### Example:        Bearer KKwmfHwxsEoeMDTMAfxOpO...
    # @param [Hash] opts the optional parameters
    # @return [Array<(HooksCollection, Fixnum, Hash)>] HooksCollection data, response status code and response headers
    def get_all_hooks_with_http_info(user_key, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HooksApi.get_all_hooks ..."
      end
      # verify the required parameter 'user_key' is set
      fail ArgumentError, "Missing the required parameter 'user_key' when calling HooksApi.get_all_hooks" if user_key.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling HooksApi.get_all_hooks" if authorization.nil?
      # resource path
      local_var_path = "/v2/hooks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'user-key'] = user_key
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HooksCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HooksApi#get_all_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
