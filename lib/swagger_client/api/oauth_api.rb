=begin
#The Meltwater API

#The Meltwater API provides the needed resources for Meltwater clients to create & delete REST Hooks and stream Meltwater search results to your specified destination.

OpenAPI spec version: 1.0.0
Contact: support@api.meltwater.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class OauthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an access token
    # Create an OAuth2 access token based on the provided `client_id` and `client_secret`
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;client_id:client_secret&#x60;  Basic Auth (RFC2617) credentials. Must contain the realm &#x60;Basic&#x60; followed by a Base64-encoded &#x60;client_id&#x60;:&#x60;client_secret&#x60; pair.   #### Example:      Basic aAlfbb1haWxDSXhhDXxxZWKJAyZXQ&#x3D;
    # @param grant_type OAuth2 grant type, use &#x60;client_credentials&#x60;
    # @param scope OAuth2 scope, use &#x60;search&#x60;
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Token]
    def create_token(user_key, authorization, grant_type, scope, opts = {})
      data, _status_code, _headers = create_token_with_http_info(user_key, authorization, grant_type, scope, opts)
      return data
    end

    # Create an access token
    # Create an OAuth2 access token based on the provided &#x60;client_id&#x60; and &#x60;client_secret&#x60;
    # @param user_key The &#x60;user_key&#x60; from [developer.meltwater.com](https://developer.meltwater.com/admin/applications/).
    # @param authorization &#x60;client_id:client_secret&#x60;  Basic Auth (RFC2617) credentials. Must contain the realm &#x60;Basic&#x60; followed by a Base64-encoded &#x60;client_id&#x60;:&#x60;client_secret&#x60; pair.   #### Example:      Basic aAlfbb1haWxDSXhhDXxxZWKJAyZXQ&#x3D;
    # @param grant_type OAuth2 grant type, use &#x60;client_credentials&#x60;
    # @param scope OAuth2 scope, use &#x60;search&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Token, Fixnum, Hash)>] OAuth2Token data, response status code and response headers
    def create_token_with_http_info(user_key, authorization, grant_type, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OauthApi.create_token ..."
      end
      # verify the required parameter 'user_key' is set
      fail ArgumentError, "Missing the required parameter 'user_key' when calling OauthApi.create_token" if user_key.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling OauthApi.create_token" if authorization.nil?
      # verify the required parameter 'grant_type' is set
      fail ArgumentError, "Missing the required parameter 'grant_type' when calling OauthApi.create_token" if grant_type.nil?
      # verify the required parameter 'scope' is set
      fail ArgumentError, "Missing the required parameter 'scope' when calling OauthApi.create_token" if scope.nil?
      # resource path
      local_var_path = "/oauth2/token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'user-key'] = user_key
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}
      form_params["grant_type"] = grant_type
      form_params["scope"] = scope

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OAuth2Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
